import pandas as pd

#Load the data file
sales_data = pd.read_csv('C:\\Users\\Nityananthen\\Downloads\\sales_data_na.csv')

#Print unstructured data
print('Print Shape of the data = ',sales_data.shape)
print(sales_data)


# Rename the columns to a consistent format
sales_data = sales_data.rename(columns={'Date': 'date', 'Day': 'day', 'Month': 'month', 'Year': 'year',
                                         'Customer_Age': 'customer_age', 'Age_Group': 'age_group', 'Customer_Gender': 'customer_gender', 
                                         'Country': 'country', 'State': 'state', 'Product_Category': 'product_category', 'Sub_Category': 'sub_category', 
                                         'Product': 'product', 'Order_Quantity': 'order_quantity', 'Unit_Cost': 'unit_cost', 'Unit_Price': 'unit_price', 
                                         'Profit': 'profit', 'Cost': 'cost', 'Revenue': 'revenue'})
print(sales_data)


#list missing data for each column
missing_data = sales_data.isnull().sum()
print(missing_data)


import calendar
# Create a dictionary of month names
months = {1: 'January',
          2: 'February',
          3: 'March',
          4: 'April',
          5: 'May',
          6: 'June',
          7: 'July',
          8: 'August',
          9: 'September',
          10: 'October',
          11: 'November',
          12: 'December'}

# Identify missing months
missing_month = sales_data['month'].isnull()

# Replace missing months with data extracted from date column
for i, row in sales_data[missing_month].iterrows():
    date_str = row['date']
    month_str, _, _ = date_str.split('/')
    month = int(month_str)
    month_name = months[month]
    sales_data.at[i, 'month'] = month_name

print(missing_month)


#list missing data for each column
missing_data_after = sales_data.isnull().sum()
print(missing_data_after)


import numpy as np
# Names of the columns we're searching for missing values 
columns = ['customer_age', 'state', 'product', 'unit_cost', 'unit_price', 'profit', 'cost', 'revenue']

for column in columns:
    print(sales_data[column].unique())
    
    
    #replace missing data with "0"
for column in columns:
    sales_data.loc[sales_data[column].isnull(), column] = 0

missing_data_after = sales_data.isnull().sum()
print(missing_data_after)


#found duplicates columns
duplicates = sales_data.duplicated()
print(duplicates)

#to remove any duplicates rows
sales_data.drop_duplicates(inplace=True)


#tidy the untidy table
# Unpivot the data
tidy_sales_data = pd.melt(sales_data, id_vars=['date', 'day', 'month', 'year', 'customer_age', 
                                  'age_group', 'customer_gender', 'country', 'state', 
                                  'product_category', 'sub_category', 'product'], 
                                  var_name='metric', value_name='value')
print(tidy_sales_data.shape)
print(tidy_sales_data)


# Define a function to process the age group
def process_age_group(row):
    age = row['customer_age']
    if age == '0-24':
        return 'Youth (<25)'
    elif age == '25-34':
        return 'Young Adults (25-34)'
    elif age == '35-64':
        return 'Adults (35-64)'
    elif age == '65+':
        return 'Seniors (64+)'
    else:
        return row['age_group']

# Identify missing age group
age_group = sales_data['age_group'].isnull()

# Replace missing age group with data extracted from age column
sales_data.loc[age_group, 'age_group'] = sales_data.loc[age_group].apply(process_age_group, axis=1)


print(sales_data)
missing_data_after = sales_data.isnull().sum()
print(missing_data_after)


print(sales_data.isnull().sum())


#check the datatype of each columns
print(sales_data.dtypes)


#assign suitable data type for each columns 

#Column Date change to date datatype
sales_data['date'] = pd.to_datetime(sales_data['date'])

#Column month to string data type
sales_data['month'] =  sales_data['month'].astype('string')

#column customer_age to int32 data type
sales_data['customer_age'] = sales_data['customer_age'].astype(int)

# Convert columns to categorical data type
# as the possible values are likely to be limited and predefined
sales_data['age_group'] = sales_data['age_group'].astype('category')
sales_data['customer_gender'] = sales_data['customer_gender'].astype('category')
sales_data['country'] = sales_data['country'].astype('category')
sales_data['state'] = sales_data['state'].astype('category')
sales_data['product_category'] = sales_data['product_category'].astype('category')
sales_data['sub_category'] = sales_data['sub_category'].astype('category')

# 'product' column as string data type
sales_data['product'] =  sales_data['product'].astype('object')

print(sales_data.dtypes)


print(sales_data)


#Explore the Data
import numpy as np

#high Profit using numpy build in function to find high profit value
np_profit = np.array(sales_data['profit'])
high_profit = np_profit.max()

print(high_profit)


# Convert to numpy array
np_sales_data = np.array(sales_data[['profit', 'cost', 'revenue']])

#relationship between the 'profit', 'cost', and 'revenue' columns, 
#so use `numpy` to calculate the correlation coefficient
# Calculate correlation matrix
correlation_matrix = np.corrcoef(np_sales_data.T)
print(correlation_matrix)


#filtering columns
#select row with product, unit cost, cost, and profit
product_sales = sales_data["product"]
order_quantity = sales_data["order_quantity"]
unit_cost = sales_data["unit_cost"]
unit_price = sales_data["unit_price"]
cost_sale = sales_data["cost"]
profit_sale = sales_data["profit"]

# Concatenate the columns horizontally
combined_sales = pd.concat([product_sales, order_quantity, unit_cost, unit_price, cost_sale, profit_sale], axis=1)

# Print the combined DataFrame
print(combined_sales)


# Group by Age group
grouped_data = sales_data.groupby(['age_group'])

# Count the number of rows in each group
grouped_counts = grouped_data.size()

# Print the resulting counts
print(grouped_counts)


# Group by Age group and age columns
grouped_data = sales_data.groupby(['age_group', 'customer_age'])

# Print the number of rows in each group
print(grouped_data.describe())


# Find average number of sales in county 
sales_country_mean = sales_data.groupby(['country' ])[['order_quantity', 'profit', 'revenue']].mean()
print(sales_country_mean)


#Sum of order quantities, profits, and revenues for each country:
sales_country_sum = sales_data.groupby(['country'])[['order_quantity', 'profit', 'revenue']].sum()
print(sales_country_sum)


#Count of sales for each country:
sales_country_count = sales_data.groupby(['country'])['order_quantity'].count()
print(sales_country_count)


#Minimum and maximum Revenue for each country:
sales_country_minmax = sales_data.groupby(['country'])['revenue'].agg(['min', 'max'])
print(sales_country_minmax)


#Median profit margin for each country:
sales_country_median = sales_data.groupby(['country'])['profit'].median()
print(sales_country_median)


#Standard deviation of revenues for each country:
sales_country_std = sales_data.groupby(['country'])['revenue'].std()
print(sales_country_std)


#Visual
import matplotlib.pyplot as plt

# Group by country and calculate median profit margin
sales_country = sales_data.groupby(['country'])['profit'].median()

# Create a pie chart of the median profit margin by country
sales_country.plot(kind='pie', figsize=(8, 8))

# Add a title and axis labels to the chart
plt.title('Median Profit Margin by Country')
plt.ylabel('')
plt.show()


# Group by country and calculate sum of order quantity, profit, and revenue
sales_country_sum = sales_data.groupby(['country'])[['order_quantity', 'profit', 'revenue']].sum()

# Create a horizontal bar chart
ax = sales_country_sum.plot(kind='barh', figsize=(10,8))

# Add labels to the chart
ax.set_title('Total Sales by Country')
ax.set_xlabel('Amount')
ax.legend(['Order Quantity', 'Profit', 'Revenue'])

# Show the chart
plt.show()



# Group by Year and calculate sum of revenue and profit
sales_by_date = sales_data.groupby('year')[['revenue', 'profit']].sum()

# Create a line chart
ax = sales_by_date.plot(kind='line', figsize=(10, 6))

# Add labels to the chart
ax.set_title('Sales, Revenue, and Profit by Date')
ax.set_xlabel('Year')
ax.set_ylabel('Amount')

# Show the chart
plt.show()


# Group by country and calculate sum of order quantity, profit, and revenue
sales_by_country = sales_data.groupby('country')[['order_quantity', 'revenue', 'profit']].sum()

# Create a bar chart
ax = sales_by_country.plot(kind='bar', figsize=(10, 6))

# Add labels to the chart
ax.set_title('Total Sales by Country')
ax.set_xlabel('Country')
ax.set_ylabel('Amount')

# Show the chart
plt.show()


# Group by product category and calculate sum of revenue
sales_by_category = sales_data.groupby('product_category')['revenue'].sum()

# Create a pie chart
ax = sales_by_category.plot(kind='pie', figsize=(10, 6), autopct='%1.1f%%')

# Add labels to the chart
ax.set_title('Distribution of Revenue by Product Category')
ax.set_ylabel('')

# Show the chart
plt.show()


# Create a scatter plot of revenue vs. profit
ax = sales_data.plot(kind='scatter', x='revenue', y='profit', figsize=(10, 6))

# Add labels to the chart
ax.set_title('Relationship between Revenue and Profit')
ax.set_xlabel('Revenue')
ax.set_ylabel('Profit')

# Show the chart
plt.show()



import seaborn as sns

# Calculate the correlation matrix
corr_matrix = sales_data.corr(numeric_only=True)

# Create a heatmap
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')

# Show the chart
plt.show()


# Select the columns to include in the pairplot
cols = ['order_quantity', 'unit_cost', 'unit_price', 'profit', 'cost', 'revenue']

# Create a pairplot
sns.pairplot(sales_data[cols])
# Show the chart
plt.show()


# Create a countplot of customer gender
sns.countplot(x='customer_gender', data=sales_data)

# Show the chart
plt.show()


# Create a boxplot of profit by product category
sns.boxplot(x='product_category', y='profit', data=sales_data)

# Show the chart
plt.show()


# Count of sales for each country
sales_country_count = sales_data.groupby(['country'])['order_quantity'].count()

# Create a bar chart
plt.figure(figsize=(12,6))
sns.barplot(x=sales_country_count.index, y=sales_country_count.values)
plt.title('Number of Sales by Country')
plt.xlabel('Country')
plt.ylabel('Number of Sales')

plt.show()


